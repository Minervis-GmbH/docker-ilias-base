#!/usr/bin/env php
<?php

namespace SRAG\ILIAS\Setup;

use ilBenchmark;
use ilClient;
use ilCtrlStructureReader;
use ilDBConnections;
use ilDBUpdate;
use ILIAS\DI\Container;
use ilIniFile;
use ilLanguage;
use ilLog;
use ilLoggerFactory;
use ilLoggingSetupSettings;

/**
 *
 */
abstract class BasicInstaller implements Installer {

	/**
	 * @var string
	 */
	protected $client_name = 'default';


	/**
	 * @inheritdoc
	 */
	public function setErrorReporting() {
		error_reporting(((ini_get("error_reporting") & ~E_NOTICE) & ~E_DEPRECATED) & ~E_STRICT);
	}


	/**
	 * @inheritdoc
	 */
	public function readParameters() {
		$this->client_name = $_SERVER['argv'][1];
	}


	/**
	 * @inheritdoc
	 */
	public function getClientName() {
		return $this->client_name;
	}


	/**
	 * @inheritdoc
	 */
	public function basicRequires() {
		require_once("./Services/Utilities/classes/class.ilUtil.php");
		require_once("./setup/classes/class.ilClient.php");
		require_once("./Services/Init/classes/class.ilIniFile.php");
		require_once("./Services/Database/classes/class.ilDBUpdate.php");
		require_once("./Services/AccessControl/classes/class.ilRbacAdmin.php");
		require_once("./Services/AccessControl/classes/class.ilRbacReview.php");
		require_once("./Services/AccessControl/classes/class.ilRbacSystem.php");
		require_once("./Services/Tree/classes/class.ilTree.php");
		require_once("./Services/Xml/classes/class.ilSaxParser.php");
		require_once("./Services/Object/classes/class.ilObjectDefinition.php");
		require_once("./setup/classes/class.ilCtrlStructureReader.php");
		require_once("./Services/Init/classes/class.ilIniFile.php");
		require_once("./Services/Utilities/classes/class.ilBenchmark.php");
		require_once("./Services/GlobalCache/classes/class.ilGlobalCache.php");
		require_once("./Services/Authentication/classes/class.ilSession.php");
		require_once("./Services/Container/classes/class.ilContainer.php");
		require_once("./Services/User/classes/class.ilObjUser.php");
	}


	/**
	 * @inheritdoc
	 */
	public function readIniFilesAndProvideClient() {
		global $ilIliasIniFile, $ilClientIniFile, $ilClient, $DIC;
		$ilIliasIniFile = new ilIniFile("./ilias.ini.php");
		$ilIliasIniFile->read();
		$DIC['ilIliasIniFile'] = $ilIliasIniFile;

		// Init CLient-ini
		$ini_file = "./" . ILIAS_WEB_DIR . "/" . $this->getClientName() . "/client.ini.php";

		$ilClientIniFile = new ilIniFile($ini_file);
		$ilClientIniFile->read();
		$DIC['ilClientIniFile'] = $ilClientIniFile;

		// Read Client
		$ilClient = new ilClient($this->getClientName(), new ilDBConnections());
		$ilClient->init();
	}


	/**
	 * @inheritdoc
	 */
	public function prepareDBUpdate() {
		global $ilClient, $ilCtrlStructureReader;
		$ilCtrlStructureReader = new ilCtrlStructureReader();
		$ilCtrlStructureReader->setIniFile($ilClient->ini);
	}


	/**
	 * @inheritdoc
	 */
	public function updateDatabase() {
		global $ilDB;
		$dbupdate = new ilDBUpdate($ilDB);
		$dbupdate->applyUpdate(9999);
		$dbupdate->applyUpdate(9999); //  Due to possible errors in TestModule

		$dbupdate->applyHotfix();
		$dbupdate->applyCustomUpdates();
	}


	/**
	 * @inheritdoc
	 */
	public function installLanguages() {
		/**
		 * @var ilClient $ilClient
		 */

		global $lng, $ilDB, $ilClient;

		$lng->setDbHandler($ilDB);
		$lng->installLanguages(array('en'), array());

		// Set default language
		$ilClient->setDefaultLanguage('en');
	}


	/**
	 * @inheritdoc
	 */
	public function provideMinimalGlobals() {

	}


	/**
	 * @inheritdoc
	 */
	public function provideGlobals() {
		global $lng, $ilBench;
		$ilBench = new ilBenchmark();
		$lng = new ilLanguage('en');
	}


	/**
	 * @inheritdoc
	 */
	public function setConfiguration() {
		/**
		 * @var ilClient $ilClient
		 */

		global $ilClient;

		// Proxy Settings
		$ilClient->setSetting('proxy_status', '');
		$ilClient->setSetting('proxy_host', '');
		$ilClient->setSetting('proxy_port', '');

		// Password Setting
		$ilClient->ini->setVariable('auth', 'password_encoder', 'md5');

		// NIC
		$ilClient->setSetting("inst_id", "0");
		$ilClient->setSetting("nic_enabled", "0");

		// Contact
		$ilClient->setSetting("admin_firstname", 'Admin');
		$ilClient->setSetting("admin_lastname", 'ILIAS');
		$ilClient->setSetting("admin_email", 'info@example.com');
		$ilClient->ini->write();
	}


	/**
	 * @inheritdoc
	 */
	public function finish() {
		/**
		 * @var ilClient $ilClient
		 */

		global $ilClient;

		// Finish Setup
		$ilClient->setSetting('setup_ok', 1);
	}
}

/**
 * Class Installer50
 *
 * @package SRAG\ILIAS\Setup
 */
class Installer50 extends BasicInstaller implements Installer {

	/**
	 * @inheritdoc
	 */
	public function versionSpecificRequires() {
		require_once('./include/inc.get_pear.php');
		require_once('./Services/Logging/classes/class.ilLog.php');
		require_once("./setup/classes/class.ilDBConnections.php");
		require_once('./setup/classes/class.ilLanguage.php');
	}


	/**
	 * @inheritdoc
	 */
	public function provideGlobalLogger() {
		global $ilLog, $log;
		$ilLog = new ilLog(ILIAS_DATA_DIR, 'ilias.log');
		$log = $ilLog;
	}
}

/**
 * Class Installer51
 *
 * @package SRAG\ILIAS\Setup
 */
class Installer51 extends BasicInstaller implements Installer {

	/**
	 * @inheritdoc
	 */
	public function versionSpecificRequires() {
		require_once('./include/inc.get_pear.php');
		include_once './Services/Logging/classes/class.ilLoggingSetupSettings.php';
		include_once './Services/Logging/classes/public/class.ilLoggerFactory.php';
		include_once("./Services/Init/classes/class.ilErrorHandling.php");
		require_once("./setup/classes/class.ilDBConnections.php");
		require_once('./setup/classes/class.ilLanguage.php');
	}


	/**
	 * @inheritdoc
	 */
	public function provideGlobalLogger() {
		global $ilLog, $log;
		$logging_settings = new ilLoggingSetupSettings();
		$logging_settings->init();
		$ilLog = ilLoggerFactory::newInstance($logging_settings)->getComponentLogger('setup');
		$log = $ilLog;
	}
}

/**
 * Class Installer52
 *
 * @package SRAG\ILIAS\Setup
 */
class Installer52 extends BasicInstaller implements Installer {

	/**
	 * @inheritdoc
	 */
	public function versionSpecificRequires() {
		require_once('./libs/composer/vendor/autoload.php');
		require_once('./libs/composer/vendor/filp/whoops/src/Whoops/Handler/Handler.php');
		include_once './Services/Logging/classes/class.ilLoggingSetupSettings.php';
		include_once './Services/Logging/classes/public/class.ilLoggerFactory.php';
		require_once("./setup/classes/class.ilDBConnections.php");
		require_once('./setup/classes/class.ilLanguage.php');
	}


	/**
	 * @inheritdoc
	 */
	public function provideMinimalGlobals() {
		parent::provideMinimalGlobals();
		global $DIC, $ilDB, $lng;
		$DIC = new Container();

		$DIC['ilDB'] = $ilDB;
	}


	/**
	 * @inheritdoc
	 */
	public function provideGlobals() {
		global $lng, $ilBench, $DIC;
		$ilBench = new ilBenchmark();
		$DIC['ilBench'] = $ilBench;
		$lng = new ilLanguage('en');
		$DIC['lng'] = $lng;
	}


	/**
	 * @inheritdoc
	 */
	public function provideGlobalLogger() {
		global $ilLog, $DIC, $log;
		$logging_settings = new ilLoggingSetupSettings();
		$logging_settings->init();
		$ilLog = ilLoggerFactory::newInstance($logging_settings)->getComponentLogger('setup');

		$DIC['ilLog'] = $ilLog;
		$log = $ilLog;
	}
}

/**
 * Class Installer53
 *
 * @package SRAG\ILIAS\Setup
 */
class Installer53 extends Installer52 implements Installer {

	/**
	 * @inheritdoc
	 */
	public function provideGlobalLogger() {
		global $DIC;
		$logging_settings = new ilLoggingSetupSettings();
		$logging_settings->init();
		$DIC['ilLoggerFactory'] = ilLoggerFactory::newInstance($logging_settings);
		parent::provideGlobalLogger();
	}
}

/**
 * Class Installer54
 *
 * @package SRAG\ILIAS\Setup
 */
class Installer54 extends Installer53 implements Installer {

	public function provideGlobals() {
		parent::provideGlobals();
		global $DIC, $ilDB;
		$_COOKIE["SESSID"] = str_repeat('x', 32);
		require_once('./setup/include/inc.setup_header.php');
		$DIC['ilDB'] = $ilDB;
		$DIC['ilObjDataCache'] = new \ilObjectDataCache();
	}


	public function prepareDBUpdate() {
		global $ilClient, $ilDB;
		parent::prepareDBUpdate();
		/**
		 * @var ilClient $ilClient
		 */

		// Finish Setup
		$ilClient->setSetting('sty_media_cont_mig', 1);
	}
}

/**
 * Class Installer60
 *
 * @package SRAG\ILIAS\Setup
 */
class Installer60 extends Installer54 implements Installer {

	public function provideGlobals() {
		global $lng, $ilBench, $DIC, $ilDB;
		$ilBench = new ilBenchmark();
		$DIC['ilBench'] = $ilBench;
		$lng = new \ilSetupLanguage('en');
		$DIC['lng'] = $lng;


		$_COOKIE["SESSID"] = str_repeat('x', 32);
		require_once('./setup/include/inc.setup_header.php');
		$DIC['ilDB'] = $ilDB;
		$DIC['ilObjDataCache'] = new \ilObjectDataCache();
		$DIC['ilLoggerFactory'] = ilLoggerFactory::getInstance();
	}


	/**
	 * @inheritdoc
	 */
	public function versionSpecificRequires() {
		require_once('./libs/composer/vendor/autoload.php');
		require_once('./libs/composer/vendor/filp/whoops/src/Whoops/Handler/Handler.php');
		include_once './Services/Logging/classes/class.ilLoggingSetupSettings.php';
		include_once './Services/Logging/classes/public/class.ilLoggerFactory.php';
		require_once('./setup/classes/class.ilSetupLanguage.php');
	}


	public function prepareDBUpdate() {
		global $ilClient, $ilDB;
		parent::prepareDBUpdate();
		/**
		 * @var ilClient $ilClient
		 */

		// Finish Setup
		$ilClient->setSetting('sty_media_cont_mig', 1);
	}


	/**
	 * @inheritdoc
	 */
	public function readIniFilesAndProvideClient() {
		global $ilIliasIniFile, $ilClientIniFile, $ilClient, $DIC;
		$ilIliasIniFile = new ilIniFile("./ilias.ini.php");
		$ilIliasIniFile->read();
		$DIC['ilIliasIniFile'] = $ilIliasIniFile;

		// Init CLient-ini
		$ini_file = "./" . ILIAS_WEB_DIR . "/" . $this->getClientName() . "/client.ini.php";

		$ilClientIniFile = new ilIniFile($ini_file);
		$ilClientIniFile->read();
		$DIC['ilClientIniFile'] = $ilClientIniFile;

		// Read Client
		$ilClient = new ilClient($this->getClientName());
		$ilClient->init();
	}
}

/**
 *
 */
class InstallerPreparation {

	/**
	 *
	 */
	public function setPathConstants() {
		define('ILIAS_ABSOLUTE_PATH', getenv('ILIAS_WWW_PATH') ?: '/var/www/ilias');
		define('ILIAS_WEB_DIR', 'data');
		define('ILIAS_DATA_DIR', getenv('ILIAS_ILIASDATA_PATH') ?: '/var/iliasdata/ilias');
	}


	/**
	 *
	 */
	public function changeDirectory() {
		chdir(ILIAS_ABSOLUTE_PATH);
	}


	/**
	 *
	 */
	public function readVersionFile() {
		require_once('./include/inc.ilias_version.php');
	}


	/**
	 * @return string
	 */
	public function getILIASVersion() {
		return ILIAS_VERSION_NUMERIC;
	}
}

/**
 *
 */
class InstallerRunner {

	/**
	 * @var Installer
	 */
	protected $installer;


	/**
	 *
	 */
	public function run() {
		$preparation = new InstallerPreparation();

		$preparation->setPathConstants();
		$preparation->changeDirectory();
		$preparation->readVersionFile();

		$this->installer = (new InstallerFactory())->getInstallerForVersion($preparation);

		$skip_update = boolval(getenv('ILIAS_SKIP_UPDATE') ?: '0');

		$this->installer->basicRequires();
		$this->installer->versionSpecificRequires();
		$this->installer->provideMinimalGlobals();
		$this->installer->readIniFilesAndProvideClient();
		$this->installer->provideGlobals();
		$this->installer->provideGlobalLogger();
		$this->installer->prepareDBUpdate();
		if (!$skip_update) {
			$this->installer->updateDatabase();
		}
		$this->installer->installLanguages();
		$this->installer->setConfiguration();
		$this->installer->finish();
	}
}

/**
 *
 */
class InstallerFactory {

	/**
	 * @param InstallerPreparation $preparation
	 *
	 * @return Installer
	 */
	public function getInstallerForVersion(InstallerPreparation $preparation) {
		$ilias_version_string = $preparation->getILIASVersion();

		$installer = null;
		switch (true) {
			case (version_compare($ilias_version_string, '6.0.0', '>=')):
				$installer = new Installer60();
				break;
			case (version_compare($ilias_version_string, '5.4.0', '>=')):
				$installer = new Installer54();
				break;
			case (version_compare($ilias_version_string, '5.3.0', '>=')):
				$installer = new Installer53();
				break;
			case (version_compare($ilias_version_string, '5.2.0', '>=')):
				$installer = new Installer52();
				break;
			case (version_compare($ilias_version_string, '5.1.0', '>=')):
				$installer = new Installer51();
				break;
			case (version_compare($ilias_version_string, '5.0.0', '>=')):
				$installer = new Installer50();
				break;
		}

		return $installer;
	}
}

/**
 *
 */
interface Installer {

	/**
	 *
	 */
	public function setErrorReporting();


	/**
	 *
	 */
	public function readParameters();


	/**
	 *
	 */
	public function basicRequires();


	/**
	 *
	 */
	public function versionSpecificRequires();


	/**
	 *
	 */
	public function readIniFilesAndProvideClient();


	/**
	 *
	 */
	public function provideMinimalGlobals();


	/**
	 *
	 */
	public function provideGlobals();


	/**
	 *
	 */
	public function prepareDBUpdate();


	/**
	 *
	 */
	public function updateDatabase();


	/**
	 *
	 */
	public function installLanguages();


	/**
	 *
	 */
	public function setConfiguration();


	/**
	 *
	 */
	public function finish();


	/**
	 *
	 */
	public function provideGlobalLogger();


	/**
	 * @return string
	 */
	public function getClientName();
}

//
// RUN
//
$runner = new InstallerRunner();
$runner->run();
